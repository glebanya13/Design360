import React from 'react';
import { ROOM_NAMES } from './RoomCard';

export default function RoomParams({ 
  roomId, 
  roomData = {}, 
  onUpdate 
}) {
  const hasLengthError = !roomData.length || parseFloat(roomData.length) <= 0;
  const hasWidthError = !roomData.width || parseFloat(roomData.width) <= 0;
  const hasHeightError = !roomData.height || parseFloat(roomData.height) <= 0;
  const hasPurposeError = !roomData.purpose || roomData.purpose.trim() === '';
  const hasRequirementsError = !roomData.requirements || roomData.requirements.trim() === '';
  const hasErrors = hasLengthError || hasWidthError || hasHeightError || hasPurposeError || hasRequirementsError;
  return (
    <div className="room-params" style={{ 
      marginBottom: '20px', 
      padding: '16px', 
      border: '1px solid var(--border)', 
      borderRadius: '8px' 
    }}>
      <h4 style={{ 
        marginBottom: '12px', 
        fontSize: '14px', 
        fontWeight: '600', 
        color: 'var(--primary)' 
      }}>
        {ROOM_NAMES[roomId]}
      </h4>
      
      <div className="param-row">
        <div className="param-group">
          <label className="param-label">
            –î–ª–∏–Ω–∞ (–º) <span style={{ color: 'red' }}>*</span>
          </label>
          <input
            type="number"
            className={`param-input ${hasLengthError ? 'error' : ''}`}
            value={roomData.length || ''}
            onChange={(e) => onUpdate(roomId, { length: e.target.value })}
            placeholder="4.5"
            step="0.1"
            min="0.1"
          />
          {hasLengthError && (
            <div className="error-message" style={{ color: 'red', fontSize: '12px', marginTop: '4px' }}>
              –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.
            </div>
          )}
        </div>
        <div className="param-group">
          <label className="param-label">
            –®–∏—Ä–∏–Ω–∞ (–º) <span style={{ color: 'red' }}>*</span>
          </label>
          <input
            type="number"
            className={`param-input ${hasWidthError ? 'error' : ''}`}
            value={roomData.width || ''}
            onChange={(e) => onUpdate(roomId, { width: e.target.value })}
            placeholder="3.2"
            step="0.1"
            min="0.1"
          />
          {hasWidthError && (
            <div className="error-message" style={{ color: 'red', fontSize: '12px', marginTop: '4px' }}>
              –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.
            </div>
          )}
        </div>
      </div>
      
      <div style={{ 
        fontSize: '11px', 
        color: 'var(--text-light)', 
        marginBottom: '12px', 
        fontStyle: 'italic' 
      }}>
        üí° –ü–ª–æ—â–∞–¥—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–ª–∏–Ω—ã –∏ —à–∏—Ä–∏–Ω—ã
      </div>
      
      <div className="param-row">
        <div className="param-group">
          <label className="param-label">
            –í—ã—Å–æ—Ç–∞ (–º) <span style={{ color: 'red' }}>*</span>
          </label>
          <input
            type="number"
            className={`param-input ${hasHeightError ? 'error' : ''}`}
            value={roomData.height || ''}
            onChange={(e) => onUpdate(roomId, { height: e.target.value })}
            placeholder="2.7"
            step="0.1"
            min="0.1"
          />
          {hasHeightError && (
            <div className="error-message" style={{ color: 'red', fontSize: '12px', marginTop: '4px' }}>
              –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.
            </div>
          )}
        </div>
        <div className="param-group">
          <label className="param-label">–ü–ª–æ—â–∞–¥—å (–º¬≤)</label>
          <input
            type="number"
            className="param-input"
            value={roomData.area || ''}
            placeholder="0.0"
            step="0.1"
            readOnly
            style={{ 
              backgroundColor: 'var(--background)', 
              fontWeight: '600',
              color: roomData.area ? 'var(--primary)' : 'var(--text-light)'
            }}
          />
        </div>
      </div>
      
      <div className="param-group">
        <label className="param-label">
          –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è <span style={{ color: 'red' }}>*</span>
        </label>
        <input
          type="text"
          className={`param-input ${hasPurposeError ? 'error' : ''}`}
          value={roomData.purpose || ''}
          onChange={(e) => onUpdate(roomId, { purpose: e.target.value })}
          placeholder="–ñ–∏–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞, –∫—É—Ö–Ω—è, —Å–∞–Ω—É–∑–µ–ª..."
        />
        {hasPurposeError && (
          <div className="error-message" style={{ color: 'red', fontSize: '12px', marginTop: '4px' }}>
            –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è.
          </div>
        )}
      </div>
      
      <div className="param-group">
        <label className="param-label">
          –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è <span style={{ color: 'red' }}>*</span>
        </label>
        <input
          type="text"
          className={`param-input ${hasRequirementsError ? 'error' : ''}`}
          value={roomData.requirements || ''}
          onChange={(e) => onUpdate(roomId, { requirements: e.target.value })}
          placeholder="–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∑–≤—É–∫–æ–∏–∑–æ–ª—è—Ü–∏—è..."
        />
        {hasRequirementsError && (
          <div className="error-message" style={{ color: 'red', fontSize: '12px', marginTop: '4px' }}>
            –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–º–µ—â–µ–Ω–∏—é.
          </div>
        )}
      </div>
    </div>
  );
}
