import React, { useEffect, useRef, useState } from 'react';
import { Link } from 'react-router-dom';
import { sendFormEmail } from '../services/emailService';
import '../styles/TZ.css';
import Step1Files from '../components/steps/Step1Files';
import Step2Object from '../components/steps/Step2Object';
import Step3Rooms from '../components/steps/Step3Rooms';
import Step4Parts from '../components/steps/Step4Parts';
import Step5Style from '../components/steps/Step5Style';
import Step6Summary from '../components/steps/Step6Summary';

export default function TZ() {
  const totalSteps = 6;
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    projectType: 'apartment',
    files: [],
    objectType: '',
    area: '',
    rooms: '',
    roomsList: [],
    specialRooms: '',
    projectParts: [],
    specialRequirements: '',
    preferredStyle: '',
    colorPreferences: '',
    budget: '',
    clientName: '',
    clientPhone: '',
    clientEmail: '',
    objectAddress: '',
    additionalInfo: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const dropRef = useRef(null);

  useEffect(() => {
    const dropZone = dropRef.current;
    if (!dropZone) return;

    const preventDefaults = (e) => {
      e.preventDefault();
      e.stopPropagation();
    };

    const addHover = () => dropZone.classList.add('dragover');
    const removeHover = () => dropZone.classList.remove('dragover');
    const handleDrop = (e) => {
      const dt = e.dataTransfer;
      const files = Array.from(dt.files);
      handleFiles(files);
    };

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {
      dropZone.addEventListener(eventName, preventDefaults);
    });
    ['dragenter', 'dragover'].forEach((eventName) => {
      dropZone.addEventListener(eventName, addHover);
    });
    ['dragleave', 'drop'].forEach((eventName) => {
      dropZone.addEventListener(eventName, removeHover);
    });
    dropZone.addEventListener('drop', handleDrop);

    return () => {
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {
        dropZone.removeEventListener(eventName, preventDefaults);
      });
      ['dragenter', 'dragover'].forEach((eventName) => {
        dropZone.removeEventListener(eventName, addHover);
      });
      ['dragleave', 'drop'].forEach((eventName) => {
        dropZone.removeEventListener(eventName, removeHover);
      });
      dropZone.removeEventListener('drop', handleDrop);
    };
  }, []);

  const updateField = (key, value) => setFormData((prev) => ({ ...prev, [key]: value }));

  const handleFiles = (files) => {
    setFormData((prev) => ({ ...prev, files: [...prev.files, ...files] }));
  };

  const removeFile = (fileName) => {
    setFormData((prev) => ({ ...prev, files: prev.files.filter((f) => f.name !== fileName) }));
  };

  const nextStep = () => {
    if (!validateStep(currentStep)) return;
    if (currentStep < totalSteps) {
      setCurrentStep((s) => s + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) setCurrentStep((s) => s - 1);
  };

  const skipStep = () => nextStep();

  const validateStep = (step) => {
    switch (step) {
      case 2: {
        if (!formData.objectType) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞');
          return false;
        }
        if (!formData.area) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞');
          return false;
        }
        return true;
      }
      case 5: {
        if (!formData.preferredStyle) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å');
          return false;
        }
        if (!formData.budget) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç');
          return false;
        }
        return true;
      }
      case 6: {
        if (!formData.clientName) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û');
          return false;
        }
        if (!formData.clientPhone) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω');
          return false;
        }
        if (!formData.clientEmail) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email');
          return false;
        }
        return true;
      }
      default:
        return true;
    }
  };

  const adaptProjectPartsForService = (parts) => {
    if (!Array.isArray(parts)) return [];
    const mapping = {
      'planning': 'apr',
      'concept': 'design',
      'visualization': 'design',
      'working-docs': 'working',
      'lighting': 'engineering',
      'furniture': 'design'
      // 'author-supervision' not mapped in service template; skip
    };
    const mapped = new Set();
    parts.forEach((p) => {
      const m = mapping[p];
      if (m) mapped.add(m);
    });
    return Array.from(mapped);
  };

  const buildServicePayload = () => {
    const totalArea = Number(formData.area || 0);
    const adapted = {
      ...formData,
      projectParts: adaptProjectPartsForService(formData.projectParts),
      // Wrap single list of uploaded files into categorized bucket expected by service
      files: { docs: formData.files }
    };
    return { adapted, totalArea };
  };

  const submitForm = async () => {
    if (!validateStep(6)) return;
    if (isSubmitting) return;
    try {
      setIsSubmitting(true);
      const { adapted, totalArea } = buildServicePayload();
      const result = await sendFormEmail(adapted, totalArea);
      if (result?.success) {
        alert('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.');
      } else {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¢–ó. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } catch (err) {
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¢–ó. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const typeMap = {
    apartment: '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
    studio: '–°—Ç—É–¥–∏—è',
    house: '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º',
    commercial: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
  };

  const styleMap = {
    'warm-minimalism': '–¢–µ–ø–ª—ã–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º',
    'urban-loft': '–£—Ä–±–∞–Ω-–ª–æ—Ñ—Ç',
    scandinavian: '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π',
    japanese: '–Ø–ø–æ–Ω—Å–∫–∏–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º',
    'industrial-light': '–ò–Ω–¥–∞—Å—Ç—Ä–∏–∞–ª-–ª–∞–π—Ç',
    'modern-kitsch': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∏—Ç—á'
  };

  const budgetMap = {
    '100-300': '100-300 —Ç—ã—Å. —Ä—É–±.',
    '300-500': '300-500 —Ç—ã—Å. —Ä—É–±.',
    '500-800': '500-800 —Ç—ã—Å. —Ä—É–±.',
    '800-1200': '800-1200 —Ç—ã—Å. —Ä—É–±.',
    '1200+': '1.2 –º–ª–Ω+ —Ä—É–±.'
  };

  return (
    <div className="app-container">
      <header className="app-header">
        <div className="header-content">
          <div className="logo"><Link to="/" style={{ color: 'inherit', textDecoration: 'none' }}>–î–∏–∑–∞–π–Ω360</Link></div>
          <div className="progress-container">
            <div className="step-indicator">–®–∞–≥ <span>{currentStep}</span> –∏–∑ {totalSteps}</div>
            <div className="progress-steps">
              {Array.from({ length: totalSteps }).map((_, i) => {
                const step = i + 1;
                const classes = ['progress-step'];
                if (step < currentStep) classes.push('completed');
                if (step === currentStep) classes.push('active');
                return <div key={step} className={classes.join(' ')} data-step={step} />;
              })}
            </div>
          </div>
        </div>
      </header>

      <main className="main-content">
        <div className="quick-actions">
          {[
            { key: 'apartment', icon: 'üè¢', title: '–ö–≤–∞—Ä—Ç–∏—Ä–∞/–°—Ç—É–¥–∏—è', desc: '–î–ª—è –∞—Ä–µ–Ω–¥—ã –∏–ª–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è' },
            { key: 'house', icon: 'üè†', title: '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º', desc: '–ö–æ—Ç—Ç–µ–¥–∂, —Ç–∞—É–Ω—Ö–∞—É—Å, –≤–∏–ª–ª–∞' },
            { key: 'commercial', icon: 'üè™', title: '–ö–æ–º–º–µ—Ä—Ü–∏—è', desc: '–û—Ñ–∏—Å, –º–∞–≥–∞–∑–∏–Ω, —Ä–µ—Å—Ç–æ—Ä–∞–Ω' }
          ].map((opt) => (
            <div
              key={opt.key}
              className={`quick-action-card ${formData.projectType === opt.key ? 'active' : ''}`}
              onClick={() => updateField('projectType', opt.key)}
            >
              <div className="action-icon">{opt.icon}</div>
              <div className="action-title">{opt.title}</div>
              <div className="action-description">{opt.desc}</div>
            </div>
          ))}
        </div>

        <Step1Files currentStep={currentStep} formData={formData} dropRef={dropRef} handleFiles={handleFiles} removeFile={removeFile} skipStep={skipStep} nextStep={nextStep} />

        <Step2Object currentStep={currentStep} formData={formData} updateField={updateField} prevStep={prevStep} nextStep={nextStep} />

        <Step3Rooms currentStep={currentStep} formData={formData} setFormData={setFormData} updateField={updateField} prevStep={prevStep} nextStep={nextStep} />

        <Step4Parts currentStep={currentStep} formData={formData} setFormData={setFormData} updateField={updateField} prevStep={prevStep} nextStep={nextStep} />

        <Step5Style currentStep={currentStep} formData={formData} updateField={updateField} budgetMap={budgetMap} prevStep={prevStep} nextStep={nextStep} />

        <Step6Summary currentStep={currentStep} formData={{...formData, updateField}} typeMap={typeMap} styleMap={styleMap} budgetMap={budgetMap} prevStep={prevStep} submitForm={submitForm} isSubmitting={isSubmitting} />

        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ */}
        <div className="steps-preview">
          {[
            { icon: 'üìÅ', title: '–§–∞–π–ª—ã', desc: '–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' },
            { icon: 'üè†', title: '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', desc: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞' },
            { icon: 'üö™', title: '–ü–æ–º–µ—â–µ–Ω–∏—è', desc: '–í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç' },
            { icon: 'üìê', title: '–°–æ—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞', desc: '–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã' },
            { icon: 'üé®', title: '–°—Ç–∏–ª—å –∏ –±—é–¥–∂–µ—Ç', desc: '–í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è' },
            { icon: 'üìä', title: '–°–≤–æ–¥–∫–∞', desc: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã' }
          ].map((step, index) => {
            const stepNumber = index + 1;
            const classes = ['step-preview-card'];
            if (stepNumber === currentStep) classes.push('current');
            else if (stepNumber > currentStep) classes.push('coming');
            return (
              <div key={step.title} className={classes.join(' ')}>
                <div className="step-preview-icon">{step.icon}</div>
                <div className="action-title">{step.title}</div>
                <div className="action-description">{step.desc}</div>
              </div>
            );
          })}
        </div>
      </main>
    </div>
  );
}


