const TELEGRAM_BOT_TOKEN = '8304590877:AAEfblij32-TzdrBtCa4HNEyTu84ADUW4wY';

/**
 * Send message to Telegram bot
 */
const sendToTelegram = async (formData, totalArea) => {
  try {
    const chatId = '522977101';
    
    const message = createTelegramMessage(formData, totalArea);
    await sendTelegramMessage(chatId, message);
    
    await sendTelegramFiles(chatId, formData.files);
    
    return {
      success: true,
      message: 'Technical specification successfully sent to Telegram!',
      method: 'telegram'
    };
  } catch (error) {
    throw error;
  }
};

/**
 * Send text message to Telegram
 */
const sendTelegramMessage = async (chatId, message) => {
  const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  const response = await fetch(telegramApiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    })
  });

  const result = await response.json();
  
  if (!result.ok) {
    throw new Error('Telegram message API error: ' + result.description);
  }
  
  return result;
};

/**
 * Send files to Telegram
 */
const sendTelegramFiles = async (chatId, files) => {
  
  const fileTypes = {
    'measurement': '–û–±–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω',
    'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ', 
    'photos': '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ',
    'examples': '–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤',
    'docs': '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
  };
  
  for (const [type, fileList] of Object.entries(files)) {
    if (fileList && fileList.length > 0) {
      
      // Send a header message for this file type
      await sendTelegramMessage(chatId, `<b>üìé ${fileTypes[type]}:</b>`);
      
      // Send each file in this category
      for (const file of fileList) {
        await sendTelegramFile(chatId, file);
      }
    }
  }
};

/**
 * Send individual file to Telegram
 */
const sendTelegramFile = async (chatId, file) => {
  
  const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`;
  
  const formData = new FormData();
  formData.append('chat_id', chatId);
  formData.append('document', file, file.name);
  formData.append('caption', `üìÑ ${file.name}`);
  
  const response = await fetch(telegramApiUrl, {
    method: 'POST',
    body: formData
  });

  const result = await response.json();
  
  if (!result.ok) {
    // Don't throw error for individual file failures, just log them
    // This way other files can still be sent
  }
  
  return result;
};

/**
 * Format form data into a Telegram message
 */
const createTelegramMessage = (formData, totalArea) => {
  const getRoomTypeText = (type) => {
    const types = {
      'hall': '–ö–æ—Ä–∏–¥–æ—Ä',
      'living': '–ì–æ—Å—Ç–∏–Ω–∞—è',
      'kitchen': '–ö—É—Ö–Ω—è',
      'kitchen-living': '–ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è',
      'bedroom': '–°–ø–∞–ª—å–Ω—è',
      'children': '–î–µ—Ç—Å–∫–∞—è',
      'bathroom': '–í–∞–Ω–Ω–∞—è',
      'toilet': '–°–∞–Ω—É–∑–µ–ª',
      'combined-bathroom': '–°/–£ —Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π',
      'balcony': '–ë–∞–ª–∫–æ–Ω',
      'loggia': '–õ–æ–¥–∂–∏—è',
      'wardrobe': '–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è',
      'office': '–ö–∞–±–∏–Ω–µ—Ç',
      'pantry': '–ö–ª–∞–¥–æ–≤–∞—è',
      'other': '–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
    };
    return types[type] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const getObjectTypeText = () => {
    // New simplified types from HTML v2.0
    const simpleMap = {
      'apartment': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
      'studio': '–°—Ç—É–¥–∏—è',
      'house': '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º',
      'commercial': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
    };
    if (simpleMap[formData.objectType]) {
      return simpleMap[formData.objectType];
    }
    // Legacy detailed structure
    if (formData.objectType === 'residential') {
      if (formData.residentialType === 'apartment') {
        const apartmentTypes = {
          'studio': '–°—Ç—É–¥–∏—è',
          '1': '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
          '2': '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
          '3': '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
          '4': '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ –±–æ–ª–µ–µ',
          'other': formData.apartmentOtherText || '–î—Ä—É–≥–æ–µ (–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        };
        return apartmentTypes[formData.apartmentType] || '–ö–≤–∞—Ä—Ç–∏—Ä–∞';
      } else if (formData.residentialType === 'house') {
        return `–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º / –¢–∞—É–Ω—Ö–∞—É—Å${formData.houseFloors ? `, ${formData.houseFloors} —ç—Ç–∞–∂(–∞)` : ''}`;
      }
      return '–ñ–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å';
    } else if (formData.objectType === 'commercial') {
      const commercialTypes = {
        'office': '–û—Ñ–∏—Å / –ö–∞–±–∏–Ω–µ—Ç',
        'shop': '–ú–∞–≥–∞–∑–∏–Ω / –®–æ—É-—Ä—É–º',
        'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω / –ë–∞—Ä / –ö–∞—Ñ–µ',
        'hotel': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ / –û—Ç–µ–ª—å',
        'mall': '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
        'warehouse': '–°–∫–ª–∞–¥ / –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
        'public': `–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ${formData.publicType?.length ? `: ${formData.publicType.join(', ')}` : ''}`,
        'other': formData.commercialOtherText || '–î—Ä—É–≥–æ–µ (–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
      };
      return commercialTypes[formData.commercialType] || '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å';
    }
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const getProjectPartsText = () => {
    const parts = [];
    if (formData.projectParts?.includes('apr')) parts.push('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è (–ê–ü–†)');
    if (formData.projectParts?.includes('design')) parts.push('–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞');
    if (formData.projectParts?.includes('working')) parts.push('–†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤)');
    if (formData.projectParts?.includes('engineering')) parts.push('–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã');
    return parts;
  };

  const stylesBudgetSection = (() => {
    // New fields
    if (formData.preferredStyle || formData.colorPreferences || formData.budget) {
      const styleMap = {
        'warm-minimalism': '–¢–µ–ø–ª—ã–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º',
        'urban-loft': '–£—Ä–±–∞–Ω-–ª–æ—Ñ—Ç',
        'scandinavian': '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π',
        'japanese': '–Ø–ø–æ–Ω—Å–∫–∏–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º',
        'industrial-light': '–ò–Ω–¥–∞—Å—Ç—Ä–∏–∞–ª-–ª–∞–π—Ç',
        'modern-kitsch': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∏—Ç—á'
      };
      let result = '';
      if (formData.preferredStyle) result += `‚Ä¢ <b>–°—Ç–∏–ª—å:</b> ${styleMap[formData.preferredStyle] || formData.preferredStyle}\n`;
      if (formData.colorPreferences) result += `‚Ä¢ <b>–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</b> ${formData.colorPreferences}\n`;
      if (formData.budget) {
        const budgetMap = {
          '100-300': '100-300 —Ç—ã—Å. —Ä—É–±.',
          '300-500': '300-500 —Ç—ã—Å. —Ä—É–±.',
          '500-800': '500-800 —Ç—ã—Å. —Ä—É–±.',
          '800-1200': '800-1200 —Ç—ã—Å. —Ä—É–±.',
          '1200+': '1.2 –º–ª–Ω+ —Ä—É–±.'
        };
        result += `‚Ä¢ <b>–ë—é–¥–∂–µ—Ç:</b> ${budgetMap[formData.budget] || formData.budget}\n`;
      }
      return result || null;
    }
    return null;
  })();

  // Rooms section supporting new roomsList
  const roomsSection = (() => {
    if (Array.isArray(formData.rooms) && formData.rooms.length) {
      return formData.rooms.map(room => 
        `‚Ä¢ ${room.name || getRoomTypeText(room.type)}: ${room.area} –º¬≤${room.comment ? ` (${room.comment})` : ''}`
      ).join('\n');
    }
    if (Array.isArray(formData.roomsList) && formData.roomsList.length) {
      return formData.roomsList.map(r => `‚Ä¢ ${r}`).join('\n');
    }
    return '‚Ä¢ –ü–æ–º–µ—â–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã';
  })();

  return `<b>üè¢ –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï</b>
<i>–°—Ç—É–¥–∏—è –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ ¬´–î–∏–∑–∞–π–Ω360¬ª</i>

üìã <b>–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>
‚Ä¢ <b>–ü—Ä–æ–µ–∫—Ç:</b> ${formData.projectName || '-'}
‚Ä¢ <b>–§–ò–û:</b> ${formData.clientName || '-'}
‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.clientPhone || '-'}
‚Ä¢ <b>Email:</b> ${formData.clientEmail || '-'}
‚Ä¢ <b>–ê–¥—Ä–µ—Å:</b> ${formData.objectAddress || '-'}

üè¢ <b>–¢–ò–ü –û–ë–™–ï–ö–¢–ê:</b>
${getObjectTypeText()}

üè† <b>–ü–û–ú–ï–©–ï–ù–ò–Ø:</b>
${roomsSection}

<b>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</b> ${totalArea.toFixed(1)} –º¬≤

üìê <b>–°–û–°–¢–ê–í –ü–†–û–ï–ö–¢–ê:</b>
${(() => {
  const parts = [];
  if (formData.projectParts?.includes('apr')) parts.push('‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è (–ê–ü–†)');
  if (formData.projectParts?.includes('design')) parts.push('‚Ä¢ –î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞');
  if (formData.projectParts?.includes('working')) parts.push('‚Ä¢ –†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤)');
  if (formData.projectParts?.includes('engineering')) parts.push('‚Ä¢ –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã');
  return parts.length > 0 ? parts.join('\n') : '‚Ä¢ –†–∞–∑–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
})()}

üé® <b>–°–¢–ò–õ–¨ –ò –ë–Æ–î–ñ–ï–¢:</b>
${(() => {
  if (stylesBudgetSection) return stylesBudgetSection;
  // Legacy styles block
  const styles = {
    'scandinavian': '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π',
    'loft': '–õ–æ—Ñ—Ç',
    'minimalism': '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',
    'modern': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π',
    'classic': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
    'neoclassic': '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞',
    'provence': '–ü—Ä–æ–≤–∞–Ω—Å',
    'ardeco': '–ê—Ä-–¥–µ–∫–æ',
    'other': formData.styleOtherText || '–î—Ä—É–≥–æ–µ'
  };
  const selectedStyles = formData.styles?.map(style => styles[style] || style) || [];
  let result = '';
  if (selectedStyles.length > 0) result += `‚Ä¢ <b>–°—Ç–∏–ª–∏:</b> ${selectedStyles.join(', ')}\n`;
  const colors = { 'light': '–°–≤–µ—Ç–ª–∞—è','dark': '–¢–µ–º–Ω–∞—è','neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è','bright': '–Ø—Ä–∫–∞—è / –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è' };
  if (formData.colorScheme) result += `‚Ä¢ <b>–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞:</b> ${colors[formData.colorScheme]}\n`;
  if (formData.colorPreferences) result += `‚Ä¢ <b>–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</b> ${formData.colorPreferences}\n`;
  if (formData.wishes) result += `‚Ä¢ <b>–ü–æ–∂–µ–ª–∞–Ω–∏—è:</b> ${formData.wishes}\n`;
  if (formData.budget) result += `‚Ä¢ <b>–ë—é–¥–∂–µ—Ç:</b> ${formData.budget}\n`;
  return result || '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ª–µ –∏ –±—é–¥–∂–µ—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
})()}

üìé <b>–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –§–ê–ô–õ–´:</b>
${(() => {
  let hasFiles = false;
  
  Object.keys(formData.files).forEach(type => {
    if (formData.files[type]?.length > 0) {
      hasFiles = true;
    }
  });
  
  if (formData.pinterestLinks) {
    hasFiles = true;
  }
  
  if (hasFiles) {
    let result = '‚Ä¢ –§–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n';
    if (formData.pinterestLinks) {
      result += `‚Ä¢ <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã:</b> ${formData.pinterestLinks}\n`;
    }
    return result;
  } else {
    return '‚Ä¢ –§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
  }
})()}

<i>–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –î–∏–∑–∞–π–Ω360</i>`;
};

/**
 * Send email with form data using multiple methods
 */
export const sendFormEmail = async (formData, totalArea) => {
  // Send to Telegram bot instead of email
  return await sendToTelegram(formData, totalArea);
};

/**
 * Send via Web3Forms (primary method)
 */
const sendViaWeb3Forms = async (formData, totalArea) => {
  // Public Web3Forms access key for demo - replace with your own
  const accessKey = 'c4c7b5c2-8a3d-4b7f-9e1a-2d5c8f6e4a3b';
  
  const formData3 = new FormData();
  formData3.append('access_key', accessKey);
  formData3.append('to_email', 'gleb.shershnev@yandex.ru');
  formData3.append('from_name', formData.clientName || 'Design360 Form');
  formData3.append('from_email', formData.clientEmail || 'noreply@design360.com');
  formData3.append('subject', `New Technical Specification: ${formData.projectName || 'Unnamed Project'}`);
  
  // Add all form data
  formData3.append('project_name', formData.projectName || 'Not specified');
  formData3.append('client_name', formData.clientName || 'Not specified');
  formData3.append('client_phone', formData.clientPhone || 'Not specified');
  formData3.append('client_email', formData.clientEmail || 'Not specified');
  formData3.append('object_address', formData.objectAddress || 'Not specified');
  formData3.append('total_area', totalArea.toFixed(1) + ' m¬≤');
  
  // Add detailed message
  formData3.append('message', createTextEmailContent(formData, totalArea));
  
  // Additional settings
  formData3.append('_template', 'table');
  formData3.append('_subject', `New Technical Specification from ${formData.clientName || 'Client'}`);

  const response = await fetch('https://api.web3forms.com/submit', {
    method: 'POST',
    body: formData3
  });

  const result = await response.json();

  if (result.success) {
    return {
      success: true,
      message: 'Technical specification successfully sent to the design studio!',
      method: 'web3forms'
    };
  } else {
    throw new Error('Web3Forms request failed: ' + result.message);
  }
};

/**
 * Fallback method using mailto link
 */
export const sendFormEmailViaMailto = async (formData, totalArea) => {
  try {
    const subject = `New Technical Specification: ${formData.projectName || 'Unnamed Project'}`;
    const textContent = createTextEmailContent(formData, totalArea);
    
    // Truncate content if too long for mailto
    const maxBodyLength = 1500;
    const body = textContent.length > maxBodyLength 
      ? textContent.substring(0, maxBodyLength) + '\n\n[Content truncated - full details in form]'
      : textContent;
    
    const mailtoLink = `mailto:gleb.shershnev@yandex.ru?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    
    // Force open mailto link using location.href (more reliable)
    window.location.href = mailtoLink;
    
    return {
      success: true,
      message: 'Opening your email client to send the technical specification.',
      method: 'mailto'
    };
  } catch (error) {
    return {
      success: false,
      message: 'Error opening email client: ' + error.message,
      error
    };
  }
};

/**
 * Create text version of email content
 */
const createTextEmailContent = (formData, totalArea) => {

  const getRoomTypeText = (type) => {
    const types = {
      'hall': '–ö–æ—Ä–∏–¥–æ—Ä',
      'living': '–ì–æ—Å—Ç–∏–Ω–∞—è',
      'kitchen': '–ö—É—Ö–Ω—è',
      'kitchen-living': '–ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è',
      'bedroom': '–°–ø–∞–ª—å–Ω—è',
      'children': '–î–µ—Ç—Å–∫–∞—è',
      'bathroom': '–í–∞–Ω–Ω–∞—è',
      'toilet': '–°–∞–Ω—É–∑–µ–ª',
      'combined-bathroom': '–°/–£ —Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π',
      'balcony': '–ë–∞–ª–∫–æ–Ω',
      'loggia': '–õ–æ–¥–∂–∏—è',
      'wardrobe': '–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è',
      'office': '–ö–∞–±–∏–Ω–µ—Ç',
      'pantry': '–ö–ª–∞–¥–æ–≤–∞—è',
      'other': '–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
    };
    return types[type] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const getObjectTypeText = () => {
    if (formData.objectType === 'residential') {
      if (formData.residentialType === 'apartment') {
        const apartmentTypes = {
          'studio': '–°—Ç—É–¥–∏—è',
          '1': '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
          '2': '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
          '3': '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
          '4': '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ –±–æ–ª–µ–µ',
          'other': formData.apartmentOtherText || '–î—Ä—É–≥–æ–µ (–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        };
        return apartmentTypes[formData.apartmentType] || '–ö–≤–∞—Ä—Ç–∏—Ä–∞';
      } else if (formData.residentialType === 'house') {
        return `–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º / –¢–∞—É–Ω—Ö–∞—É—Å${formData.houseFloors ? `, ${formData.houseFloors} —ç—Ç–∞–∂(–∞)` : ''}`;
      }
      return '–ñ–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å';
    } else if (formData.objectType === 'commercial') {
      const commercialTypes = {
        'office': '–û—Ñ–∏—Å / –ö–∞–±–∏–Ω–µ—Ç',
        'shop': '–ú–∞–≥–∞–∑–∏–Ω / –®–æ—É-—Ä—É–º',
        'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω / –ë–∞—Ä / –ö–∞—Ñ–µ',
        'hotel': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ / –û—Ç–µ–ª—å',
        'mall': '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
        'warehouse': '–°–∫–ª–∞–¥ / –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
        'public': `–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ${formData.publicType?.length ? `: ${formData.publicType.join(', ')}` : ''}`,
        'other': formData.commercialOtherText || '–î—Ä—É–≥–æ–µ (–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
      };
      return commercialTypes[formData.commercialType] || '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å';
    }
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  return `
=====================================
–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï
–°—Ç—É–¥–∏—è –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ ¬´–î–∏–∑–∞–π–Ω360¬ª
=====================================

üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
--------------------
–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${formData.projectName || '-'}
–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞: ${formData.clientName || '-'}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.clientPhone || '-'}
Email: ${formData.clientEmail || '-'}
–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞: ${formData.objectAddress || '-'}

üè¢ –¢–ò–ü –û–ë–™–ï–ö–¢–ê:
---------------
${getObjectTypeText()}

üè† –ü–û–ú–ï–©–ï–ù–ò–Ø:
-------------
${formData.rooms?.length ? formData.rooms.map(room => 
    `${room.name || getRoomTypeText(room.type)}: ${room.area} –º¬≤${room.comment ? ` (${room.comment})` : ''}`
  ).join('\n') : '–ü–æ–º–µ—â–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'}

–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: ${totalArea.toFixed(1)} –º¬≤

üìê –°–û–°–¢–ê–í –ü–†–û–ï–ö–¢–ê:
------------------
${(() => {
  const parts = [];
  if (formData.projectParts?.includes('apr')) parts.push('‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è (–ê–ü–†)');
  if (formData.projectParts?.includes('design')) parts.push('‚Ä¢ –î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞');
  if (formData.projectParts?.includes('working')) parts.push('‚Ä¢ –†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤)');
  if (formData.projectParts?.includes('engineering')) parts.push('‚Ä¢ –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã');
  return parts.length > 0 ? parts.join('\n') : '–†–∞–∑–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
})()}

üé® –°–¢–ò–õ–¨ –ò –ë–Æ–î–ñ–ï–¢:
------------------
${(() => {
  const styles = {
    'scandinavian': '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π',
    'loft': '–õ–æ—Ñ—Ç',
    'minimalism': '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',
    'modern': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π',
    'classic': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
    'neoclassic': '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞',
    'provence': '–ü—Ä–æ–≤–∞–Ω—Å',
    'ardeco': '–ê—Ä-–¥–µ–∫–æ',
    'other': formData.styleOtherText || '–î—Ä—É–≥–æ–µ'
  };
  const selectedStyles = formData.styles?.map(style => styles[style] || style) || [];
  let result = '';
  if (selectedStyles.length > 0) result += `–°—Ç–∏–ª–∏: ${selectedStyles.join(', ')}\n`;
  
  const colors = {
    'light': '–°–≤–µ—Ç–ª–∞—è',
    'dark': '–¢–µ–º–Ω–∞—è',
    'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
    'bright': '–Ø—Ä–∫–∞—è / –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è'
  };
  if (formData.colorScheme) result += `–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞: ${colors[formData.colorScheme]}\n`;
  if (formData.colorPreferences) result += `–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${formData.colorPreferences}\n`;
  if (formData.wishes) result += `–ü–æ–∂–µ–ª–∞–Ω–∏—è: ${formData.wishes}\n`;
  if (formData.budget) result += `–ë—é–¥–∂–µ—Ç: ${formData.budget}\n`;
  
  return result || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ª–µ –∏ –±—é–¥–∂–µ—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
})()}

üìé –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –§–ê–ô–õ–´:
---------------------
${(() => {
  const fileTypes = {
    'measurement': '–û–±–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω',
    'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
    'photos': '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ',
    'examples': '–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤',
    'docs': '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
  };
  
  let result = '';
  let hasFiles = false;
  
  Object.keys(formData.files).forEach(type => {
    if (formData.files[type]?.length > 0) {
      hasFiles = true;
      result += `${fileTypes[type]}:\n`;
      formData.files[type].forEach(file => {
        result += `  ‚Ä¢ ${file.name}\n`;
      });
    }
  });
  
  if (formData.pinterestLinks) {
    hasFiles = true;
    result += `–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã:\n  ‚Ä¢ ${formData.pinterestLinks}\n`;
  }
  
  return hasFiles ? result : '–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
})()}

=====================================
–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¢–ó
–°—Ç—É–¥–∏—è ¬´–î–∏–∑–∞–π–Ω360¬ª
=====================================
  `;
};